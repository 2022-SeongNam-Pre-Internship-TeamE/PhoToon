# 도커파일은 빌드할때 반영
# 도커컴포즈는 업할때 반영
version: "3"

services: 

  photoon_frontend:
    build: ./frontend
    command: ["npm", "start"]
    container_name: photoon_frontend
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    ports:
      - 3000:3000
    networks:
      - photoon
    volumes:
      - ./frontend:/frontend
    tty: true

  photoon_backend:
    build:
    # context : 현재 폴더의 backend 폴더에 있는 도커파일을 쓰겠다.
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    container_name: photoon_backend  
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "/wait & python ./ai_model/ai_init.py & python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    
    # restart : 실패하면 재시작
    restart: on-failure
    ports:
    # 왼쪽이 도커 바깥(외부에서 접근할 포트번호) / 오른쪽이 도커 내부(컨테이너 내부)
      - 8000:8000
    volumes:
     # 왼쪽이 우리 컴퓨터, 오른쪽이 도커 컨테이너
     # 리눅스 컨테이너의 백엔드 폴더에 우리 컴퓨터의 백엔드 폴더를 공유하겠다.
     # 서로 바뀐 부분 적용됨
      - ./backend:/backend
    # 가상 네트워크 연결
    networks:
      - photoon
    depends_on:
      - photoon_mysql

  photoon_mysql:
    image: mysql
    command: --lower_case_table_names=1
    container_name: photoon_mysql # 컨테이너 이름 설정
    ports:
      - "3306:3306"
    env_file:
      - ./backend/.env
    # 가상 네트워크 연결
    networks:
      - photoon

  photoon_rabbitmq:
    hostname: photoon_host
    container_name: photoon_rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    ports:
      - 5672:5672 # Default Port
      - 15672:15672 # For UI
    volumes:
      - ./backend:/backend
    networks:
      - photoon
    depends_on:
      - photoon_backend
    expose:
      - "15672"

  photoon_celery:
    container_name: photoon_celery
    build:
      context: ./backend
    restart: unless-stopped
#    env_file:
#      - ./.env
    depends_on:
      - "photoon_backend"
      - "photoon_rabbitmq"
    volumes:
      - ./backend:/backend
    networks:
      - photoon
    command: ["celery", "-A", "config", "worker", "--loglevel=info"]


networks:
  photoon:
    driver: bridge
